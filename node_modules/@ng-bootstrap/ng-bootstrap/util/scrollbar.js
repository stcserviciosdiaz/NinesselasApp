import { Injectable, Inject } from '@angular/core';
import { DOCUMENT } from '@angular/common';
var noop = function () { };
var ɵ0 = noop;
/**
 * Utility to handle the scrollbar.
 *
 * It allows to compensate the lack of a vertical scrollbar by adding an
 * equivalent padding on the right of the body, and to remove this compensation.
 */
var ScrollBar = /** @class */ (function () {
    function ScrollBar(_document) {
        this._document = _document;
    }
    /**
     * Detects if a scrollbar is present and if yes, already compensates for its
     * removal by adding an equivalent padding on the right of the body.
     *
     * @return a callback used to revert the compensation (noop if there was none,
     * otherwise a function removing the padding)
     */
    /**
       * Detects if a scrollbar is present and if yes, already compensates for its
       * removal by adding an equivalent padding on the right of the body.
       *
       * @return a callback used to revert the compensation (noop if there was none,
       * otherwise a function removing the padding)
       */
    ScrollBar.prototype.compensate = /**
       * Detects if a scrollbar is present and if yes, already compensates for its
       * removal by adding an equivalent padding on the right of the body.
       *
       * @return a callback used to revert the compensation (noop if there was none,
       * otherwise a function removing the padding)
       */
    function () { return !this._isPresent() ? noop : this._adjustBody(this._getWidth()); };
    /**
     * Adds a padding of the given width on the right of the body.
     *
     * @return a callback used to revert the padding to its previous value
     */
    /**
       * Adds a padding of the given width on the right of the body.
       *
       * @return a callback used to revert the padding to its previous value
       */
    ScrollBar.prototype._adjustBody = /**
       * Adds a padding of the given width on the right of the body.
       *
       * @return a callback used to revert the padding to its previous value
       */
    function (width) {
        var body = this._document.body;
        var userSetPadding = body.style.paddingRight;
        var paddingAmount = parseFloat(window.getComputedStyle(body)['padding-right']);
        body.style['padding-right'] = paddingAmount + width + "px";
        return function () { return body.style['padding-right'] = userSetPadding; };
    };
    /**
     * Tells whether a scrollbar is currently present on the body.
     *
     * @return true if scrollbar is present, false otherwise
     */
    /**
       * Tells whether a scrollbar is currently present on the body.
       *
       * @return true if scrollbar is present, false otherwise
       */
    ScrollBar.prototype._isPresent = /**
       * Tells whether a scrollbar is currently present on the body.
       *
       * @return true if scrollbar is present, false otherwise
       */
    function () {
        var rect = this._document.body.getBoundingClientRect();
        return rect.left + rect.right < window.innerWidth;
    };
    /**
     * Calculates and returns the width of a scrollbar.
     *
     * @return the width of a scrollbar on this page
     */
    /**
       * Calculates and returns the width of a scrollbar.
       *
       * @return the width of a scrollbar on this page
       */
    ScrollBar.prototype._getWidth = /**
       * Calculates and returns the width of a scrollbar.
       *
       * @return the width of a scrollbar on this page
       */
    function () {
        var measurer = this._document.createElement('div');
        measurer.className = 'modal-scrollbar-measure';
        var body = this._document.body;
        body.appendChild(measurer);
        var width = measurer.getBoundingClientRect().width - measurer.clientWidth;
        body.removeChild(measurer);
        return width;
    };
    ScrollBar.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    ScrollBar.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
    ]; };
    return ScrollBar;
}());
export { ScrollBar };
export { ɵ0 };
//# sourceMappingURL=scrollbar.js.map